import { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import { useQuery } from '@tanstack/react-query';
import { useLocation, useRoute } from 'wouter';
import { 
  ArrowLeft, 
  Clock, 
  GitBranch, 
  GitCommit, 
  User, 
  Calendar,
  Play,
  XCircle,
  Terminal,
  Download,
  FileText,
  RefreshCw,
  ChevronRight,
  ChevronDown
} from 'lucide-react';
import { useAuth } from '@/lib/auth';
import DashboardLayout from '@/components/dashboard/layout/DashboardLayout';
import { Button } from '@/components/ui/button';
import { 
  Card, 
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle 
} from '@/components/ui/card';
import { useWebSocket } from '@/context/WebSocketContext';
import { Progress } from '@/components/ui/progress';
import { formatDistanceToNow, format } from 'date-fns';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import LiveLogViewer from '@/components/dashboard/builds/LiveLogViewer';
import BuildMonitor from '@/components/dashboard/builds/BuildMonitor';
import RealtimeBuildUpdater from '@/components/dashboard/builds/RealtimeBuildUpdater';
import RealtimeBuildUpdater from '@/components/dashboard/builds/RealtimeBuildUpdater';

// Sample build data
const sampleBuilds = [
  {
    id: '1',
    projectId: '1',
    projectName: 'Frontend App',
    status: 'success',
    branch: 'main',
    commitSha: 'a1b2c3d4e5f6g7h8i9j0',
    commitMessage: 'Update header component with new design',
    author: 'Sarah Chen',
    duration: 145000, // 2m 25s
    startedAt: new Date(Date.now() - 3600000), // 1 hour ago
    finishedAt: new Date(Date.now() - 3455000), // 57.5 minutes ago
    steps: [
      {
        id: 'step-1',
        name: 'Checkout',
        status: 'success',
        duration: 2000, // 2s
        log: '> Checking out repository...\n> Initialized empty Git repository\n> Fetching origin\n> Checking out main branch\n> Done!'
      },
      {
        id: 'step-2',
        name: 'Install Dependencies',
        status: 'success',
        duration: 35000, // 35s
        log: '> Installing dependencies...\n> npm install\n> Added 1242 packages in 35s\n> Done!'
      },
      {
        id: 'step-3',
        name: 'Lint',
        status: 'success',
        duration: 8000, // 8s
        log: '> Running lint...\n> npm run lint\n> eslint src/**/*.{js,jsx,ts,tsx}\n> No linting errors found!\n> Done!'
      },
      {
        id: 'step-4',
        name: 'Test',
        status: 'success',
        duration: 22000, // 22s
        log: '> Running tests...\n> npm run test\n> jest --coverage\n> PASS src/components/Header.test.tsx\n> PASS src/utils/format.test.ts\n> Test Suites: 12 passed, 12 total\n> Tests: 48 passed, 48 total\n> Done!'
      },
      {
        id: 'step-5',
        name: 'Build',
        status: 'success',
        duration: 78000, // 1m 18s
        log: '> Building application...\n> npm run build\n> vite build\n> optimizing for production...\n> bundle size: 1.2MB\n> Done!'
      }
    ],
    artifacts: [
      {
        id: 'artifact-1',
        name: 'build.zip',
        size: 3405862, // ~3.4MB
        url: '#'
      },
      {
        id: 'artifact-2',
        name: 'coverage-report.html',
        size: 527391, // ~527KB
        url: '#'
      }
    ]
  },
  {
    id: '3',
    projectId: '1',
    projectName: 'Frontend App',
    status: 'failed',
    branch: 'bugfix/mobile-layout',
    commitSha: 'c3d4e5f6g7h8i9j0k1l2',
    commitMessage: 'Fix responsive layout on small screens',
    author: 'Sarah Chen',
    duration: 74000, // 1m 14s
    startedAt: new Date(Date.now() - 900000), // 15 minutes ago
    finishedAt: new Date(Date.now() - 826000), // 13.8 minutes ago
    steps: [
      {
        id: 'step-1',
        name: 'Checkout',
        status: 'success',
        duration: 2000, // 2s
        log: '> Checking out repository...\n> Initialized empty Git repository\n> Fetching origin\n> Checking out bugfix/mobile-layout branch\n> Done!'
      },
      {
        id: 'step-2',
        name: 'Install Dependencies',
        status: 'success',
        duration: 34000, // 34s
        log: '> Installing dependencies...\n> npm install\n> Added 1242 packages in 34s\n> Done!'
      },
      {
        id: 'step-3',
        name: 'Lint',
        status: 'success',
        duration: 7000, // 7s
        log: '> Running lint...\n> npm run lint\n> eslint src/**/*.{js,jsx,ts,tsx}\n> No linting errors found!\n> Done!'
      },
      {
        id: 'step-4',
        name: 'Test',
        status: 'failed',
        duration: 31000, // 31s
        log: '> Running tests...\n> npm run test\n> jest --coverage\n> FAIL src/components/MobileNav.test.tsx\n> Test failed: Expected element to have class "hidden" but received "flex"\n> Test Suites: 1 failed, 11 passed, 12 total\n> Tests: 2 failed, 46 passed, 48 total\n> Error: Process completed with exit code 1.'
      }
    ],
    artifacts: []
  },
  {
    id: '2',
    projectId: '2',
    projectName: 'API Service',
    status: 'running',
    branch: 'feature/auth-improvements',
    commitSha: 'b2c3d4e5f6g7h8i9j0k1',
    commitMessage: 'Implement OAuth2 flow',
    author: 'John Doe',
    duration: 60000, // 1m (running)
    startedAt: new Date(Date.now() - 60000), // 1 minute ago
    finishedAt: null,
    steps: [
      {
        id: 'step-1',
        name: 'Checkout',
        status: 'success',
        duration: 2000, // 2s
        log: '> Checking out repository...\n> Initialized empty Git repository\n> Fetching origin\n> Checking out feature/auth-improvements branch\n> Done!'
      },
      {
        id: 'step-2',
        name: 'Install Dependencies',
        status: 'success',
        duration: 28000, // 28s
        log: '> Installing dependencies...\n> npm install\n> Added 987 packages in 28s\n> Done!'
      },
      {
        id: 'step-3',
        name: 'Lint',
        status: 'success',
        duration: 5000, // 5s
        log: '> Running lint...\n> npm run lint\n> eslint src/**/*.ts\n> No linting errors found!\n> Done!'
      },
      {
        id: 'step-4',
        name: 'Test',
        status: 'running',
        duration: 25000, // 25s so far
        log: '> Running tests...\n> npm run test\n> jest --coverage\n> PASS src/auth/basic-auth.test.ts\n> Running OAuth2 tests...'
      }
    ],
    artifacts: []
  }
];

// Format duration in milliseconds to human readable format
const formatDuration = (ms: number): string => {
  if (!ms) return '0s';
  
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  
  if (minutes === 0) {
    return `${remainingSeconds}s`;
  }
  
  return `${minutes}m ${remainingSeconds}s`;
};

// Format file size to human readable format
const formatFileSize = (bytes: number): string => {
  if (bytes < 1024) {
    return `${bytes} B`;
  } else if (bytes < 1024 * 1024) {
    return `${(bytes / 1024).toFixed(1)} KB`;
  } else if (bytes < 1024 * 1024 * 1024) {
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  } else {
    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;
  }
};

export default function BuildDetailsPage() {
  const [, params] = useRoute('/dashboard/builds/:id');
  const [, setLocation] = useLocation();
  const { user, token } = useAuth();
  const { isConnected } = useWebSocket();
  const logRef = useRef<HTMLDivElement>(null);
  const [activeTab, setActiveTab] = useState('details');
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [showBuildMonitor, setShowBuildMonitor] = useState(false);
  const buildId = params?.id;

  // Redirect if not authenticated
  useEffect(() => {
    if (!user || !token) {
      setLocation('/');
    }
  }, [user, token, setLocation]);

  // Fetch build details
  const { data: build, isLoading, refetch } = useQuery({
    queryKey: [`/api/builds/${buildId}`],
    queryFn: async () => {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      const foundBuild = sampleBuilds.find(b => b.id === buildId);
      if (!foundBuild) throw new Error('Build not found');
      return foundBuild;
    },
    enabled: !!token && !!buildId
  });

  // Auto-refresh running builds every 5 seconds as a fallback
  useEffect(() => {
    let intervalId: NodeJS.Timeout | null = null;
    if (build?.status === 'running') {
      intervalId = setInterval(() => {
        refetch();
      }, 5000);
    }

    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, [refetch, build?.status]);

  // Auto-scroll logs to bottom when new content arrives
  useEffect(() => {
    if (logRef.current && activeTab === 'logs') {
      logRef.current.scrollTop = logRef.current.scrollHeight;
    }
  }, [build, activeTab]);

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await refetch();
    setIsRefreshing(false);
  };

  // Show build monitor for running builds
  useEffect(() => {
    if (build && build.status === 'running') {
      setShowBuildMonitor(true);
    } else {
      setShowBuildMonitor(false);
    }
  }, [build]);

  // Build status styling
  const statusStyles = {
    success: {
      bg: 'bg-green-100 dark:bg-green-900/30',
      text: 'text-green-700 dark:text-green-400',
      icon: <Play className="h-4 w-4" />
    },
    running: {
      bg: 'bg-blue-100 dark:bg-blue-900/30',
      text: 'text-blue-700 dark:text-blue-400',
      icon: <Play className="h-4 w-4 animate-pulse" />
    },
    failed: {
      bg: 'bg-red-100 dark:bg-red-900/30',
      text: 'text-red-700 dark:text-red-400',
      icon: <XCircle className="h-4 w-4" />
    },
    queued: {
      bg: 'bg-slate-100 dark:bg-slate-800',
      text: 'text-slate-700 dark:text-slate-400',
      icon: <Clock className="h-4 w-4" />
    },
    canceled: {
      bg: 'bg-slate-100 dark:bg-slate-800',
      text: 'text-slate-700 dark:text-slate-400',
      icon: <XCircle className="h-4 w-4" />
    }
  };

  if (!user) {
    return null;
  }

  // Handle loading state
  if (isLoading || !build) {
    return (
      <DashboardLayout>
        <div className="mb-8 flex items-center">
          <Button 
            variant="ghost" 
            onClick={() => setLocation('/dashboard/builds')}
            className="mr-4"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Builds
          </Button>
          <h1 className="text-3xl font-bold text-slate-900 dark:text-white">
            Build Details
          </h1>
        </div>
        
        <div className="space-y-4">
          <div className="h-32 bg-slate-100 dark:bg-slate-800 rounded-lg animate-pulse" />
          <div className="h-64 bg-slate-100 dark:bg-slate-800 rounded-lg animate-pulse" />
        </div>
      </DashboardLayout>
    );
  }

  // Calculate build progress (for running builds)
  const calculateProgress = () => {
    if (build.status !== 'running') return 100;
    
    const completedSteps = build.steps.filter(step => step.status === 'success').length;
    const totalSteps = build.steps.length;
    
    return Math.round((completedSteps / totalSteps) * 100);
  };

  // Get the active step for running builds
  const getActiveStep = () => {
    if (build.status !== 'running') return null;
    return build.steps.find(step => step.status === 'running');
  };

  // Get all logs combined
  const getAllLogs = () => {
    return build.steps.map(step => `# ${step.name}\n${step.log}`).join('\n\n');
  };
  return (
    <DashboardLayout>
      <RealtimeBuildUpdater projectId={build?.projectId}>
              <h1 className="text-2xl font-bold text-slate-900 dark:text-white">
                Build #{build.id}
              </h1>
              <p className="text-sm text-slate-500 dark:text-slate-400">
                {build.projectName} • {build.commitMessage}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-3">
            <Button 
              variant="outline" 
              onClick={handleRefresh}
              disabled={isRefreshing}
            >
              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />
              Refresh
            </Button>
            
            {build.status === 'running' && (
              <Button 
                variant="outline"
                className="text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300 border-red-200 dark:border-red-900 hover:border-red-300 dark:hover:border-red-700"
              >
                <XCircle className="h-4 w-4 mr-2" />
                Cancel Build
              </Button>
            )}
            
            {build.status === 'failed' && (
              <Button>
                <Play className="h-4 w-4 mr-2" />
                Retry Build
              </Button>
            )}
          </div>
        </div>

        {/* Build progress (for running builds) */}
        {build.status === 'running' && (
          <Card className="mb-6">
            <CardContent className="pt-6">
              <div className="flex flex-col space-y-2">
                <div className="flex justify-between items-center">
                  <p className="text-sm font-medium text-slate-700 dark:text-slate-300">
                    {getActiveStep()?.name || 'Processing...'}
                  </p>
                  <span className="text-sm text-slate-600 dark:text-slate-400">
                    {calculateProgress()}%
                  </span>
                </div>
                <Progress value={calculateProgress()} className="h-2" />
              </div>
            </CardContent>
          </Card>
        )}

        {/* Build details tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="mb-6">
          <TabsList>
            <TabsTrigger value="details">Details</TabsTrigger>
            <TabsTrigger value="logs">Logs</TabsTrigger>
            {build.artifacts.length > 0 && (
              <TabsTrigger value="artifacts">Artifacts</TabsTrigger>
            )}
          </TabsList>
          
          <TabsContent value="details" className="mt-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Build info */}
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle>Build Information</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Project</h3>
                      <p className="text-slate-900 dark:text-white font-medium">{build.projectName}</p>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Status</h3>
                      <p className={`font-medium ${statusStyles[build.status as keyof typeof statusStyles].text}`}>
                        <span className="capitalize">{build.status}</span>
                      </p>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Author</h3>
                      <div className="flex items-center">
                        <User className="h-4 w-4 mr-2 text-slate-400 dark:text-slate-500" />
                        <p className="text-slate-900 dark:text-white font-medium">{build.author}</p>
                      </div>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Branch</h3>
                      <div className="flex items-center">
                        <GitBranch className="h-4 w-4 mr-2 text-slate-400 dark:text-slate-500" />
                        <p className="text-slate-900 dark:text-white font-medium">{build.branch}</p>
                      </div>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Commit</h3>
                      <div className="flex items-center">
                        <GitCommit className="h-4 w-4 mr-2 text-slate-400 dark:text-slate-500" />
                        <p className="text-slate-900 dark:text-white font-medium font-mono text-sm">
                          {build.commitSha.substring(0, 8)}
                        </p>
                      </div>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Duration</h3>
                      <div className="flex items-center">
                        <Clock className="h-4 w-4 mr-2 text-slate-400 dark:text-slate-500" />
                        <p className="text-slate-900 dark:text-white font-medium">
                          {formatDuration(build.duration)}
                        </p>
                      </div>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Started</h3>
                      <div className="flex items-center">
                        <Calendar className="h-4 w-4 mr-2 text-slate-400 dark:text-slate-500" />
                        <p className="text-slate-900 dark:text-white font-medium">
                          {format(build.startedAt, 'MMM d, yyyy HH:mm:ss')}
                        </p>
                      </div>
                    </div>
                    
                    <div>
                      <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Finished</h3>
                      <div className="flex items-center">
                        <Calendar className="h-4 w-4 mr-2 text-slate-400 dark:text-slate-500" />
                        <p className="text-slate-900 dark:text-white font-medium">
                          {build.finishedAt ? format(build.finishedAt, 'MMM d, yyyy HH:mm:ss') : 'In progress...'}
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Commit Message</
                    </div>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-sm font-medium text-slate-500 dark:text-slate-400 mb-2">Commit Message</h3>
                  <p className="text-slate-900 dark:text-white font-medium">{build.commitMessage}</p>
                </div>
              </CardContent>
            </Card>
            
            {/* Steps timeline */}
            <Card>
              <CardHeader>
                <CardTitle>Build Steps</CardTitle>
                <CardDescription>Pipeline execution timeline</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {build.steps.map((step, index) => (
                    <div key={step.id} className="relative">
                      {/* Step connection line */}
                      {index < build.steps.length - 1 && (
                        <div className="absolute left-2.5 top-6 bottom-0 w-0.5 bg-slate-200 dark:bg-slate-700" />
                      )}
                      
                      <div className="flex items-start">
                        {/* Status indicator */}
                        <div className={`flex-shrink-0 w-5 h-5 rounded-full mt-1 flex items-center justify-center ${
                          step.status === 'success' ? 'bg-green-100 dark:bg-green-900/30' :
                          step.status === 'running' ? 'bg-blue-100 dark:bg-blue-900/30' :
                          step.status === 'failed' ? 'bg-red-100 dark:bg-red-900/30' :
                          'bg-slate-100 dark:bg-slate-800'
                        }`}>
                          <div className={`w-2.5 h-2.5 rounded-full ${
                            step.status === 'success' ? 'bg-green-500 dark:bg-green-400' :
                            step.status === 'running' ? 'bg-blue-500 dark:bg-blue-400 animate-pulse' :
                            step.status === 'failed' ? 'bg-red-500 dark:bg-red-400' :
                            'bg-slate-400 dark:bg-slate-500'
                          }`} />
                        </div>
                        
                        <div className="ml-4 min-w-0 flex-1">
                          <div className="text-sm font-medium text-slate-900 dark:text-white">{step.name}</div>
                          <div className="mt-1 flex items-center text-xs text-slate-500 dark:text-slate-400">
                            <span className={`capitalize ${
                              step.status === 'success' ? 'text-green-600 dark:text-green-400' :
                              step.status === 'running' ? 'text-blue-600 dark:text-blue-400' :
                              step.status === 'failed' ? 'text-red-600 dark:text-red-400' :
                              ''
                            }`}>
                              {step.status}
                            </span>
                            <span className="mx-2">•</span>
                            <span>{formatDuration(step.duration)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="logs" className="mt-6">
          <Card className="min-h-[600px]">
            <CardHeader className="pb-0">
              <CardTitle className="flex items-center">
                <Terminal className="h-5 w-5 mr-2" />
                Build Logs
              </CardTitle>
              <CardDescription>
                {build.status === 'running' ? 'Live logs streaming in real-time' : 'Complete build logs'}
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-4">
              <div className="h-[600px]">
                <LiveLogViewer 
                  buildId={build.id} 
                  initialLogs={getAllLogs()} 
                  status={build.status as 'running' | 'success' | 'failed' | 'queued' | 'canceled'}
                />
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        {build.artifacts.length > 0 && (
          <TabsContent value="artifacts" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Download className="h-5 w-5 mr-2" />
                  Artifacts
                </CardTitle>
                <CardDescription>
                  Files generated during the build process
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {build.artifacts.map((artifact) => (
                    <div 
                      key={artifact.id}
                      className="flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-900 rounded-lg border border-slate-200 dark:border-slate-700"
                    >
                      <div className="flex items-center">
                        <FileText className="h-5 w-5 text-slate-400 dark:text-slate-500 mr-3" />
                        <div>
                          <h4 className="text-sm font-medium text-slate-900 dark:text-white">{artifact.name}</h4>
                          <p className="text-xs text-slate-500 dark:text-slate-400">
                            {formatFileSize(artifact.size)}
                          </p>
                        </div>
                      </div>
                      <Button size="sm" variant="outline" asChild>
                        <a href={artifact.url} download>
                          <Download className="h-4 w-4 mr-2" />
                          Download
                        </a>
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        )}
      </Tabs>

      {/* Show real-time build monitor for running builds */}
      {showBuildMonitor && (
        <BuildMonitor 
          buildId={build.id}
          initialStatus={build.status as 'running' | 'success' | 'failed' | 'queued' | 'canceled'}
          onClose={() => setShowBuildMonitor(false)}
        />
      )}
    </DashboardLayout>
  );
}
